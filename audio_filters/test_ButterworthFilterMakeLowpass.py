# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit--test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=make_lowpass_c429b6062d
ROOST_METHOD_SIG_HASH=make_lowpass_c429b6062d

Scenario 1: Validate the creation of a valid low-pass filter
Details:
  TestName: test_valid_lowpass_filter_creation
  Description: This test is intended to verify that the function can create a valid low-pass filter based on the provided parameters. This is the core functionality of the function and must operate as expected.
Execution:
  Arrange: Define a frequency, samplerate, and q_factor.
  Act: Call the function with the defined parameters.
  Assert: Check that the returned object is an instance of IIRFilter and that the coefficients match the expected values.
Validation:
  This test ensures that the function can create a low-pass filter as expected. The correctness of the coefficients is crucial to the filter's operation.

Scenario 2: Validate handling of zero frequency
Details:
  TestName: test_zero_frequency_handling
  Description: This test is intended to verify that the function can handle a zero frequency input. This is an edge case that could potentially cause division by zero errors.
Execution:
  Arrange: Define a frequency of zero, a samplerate, and a q_factor.
  Act: Call the function with the defined parameters.
  Assert: Check that the returned object is an instance of IIRFilter and that the coefficients are correctly calculated for a zero frequency.
Validation:
  This test ensures that the function can handle edge cases and avoids potential division by zero errors.

Scenario 3: Validate handling of negative frequency
Details:
  TestName: test_negative_frequency_handling
  Description: This test is intended to verify that the function can handle a negative frequency input. This is an edge case that could potentially lead to unexpected results.
Execution:
  Arrange: Define a negative frequency, a samplerate, and a q_factor.
  Act: Call the function with the defined parameters.
  Assert: Check that the returned object is an instance of IIRFilter and that the coefficients are correctly calculated for a negative frequency.
Validation:
  This test ensures that the function can handle edge cases and produces the correct results for negative frequencies.

Scenario 4: Validate handling of zero q_factor
Details:
  TestName: test_zero_q_factor_handling
  Description: This test is intended to verify that the function can handle a zero q_factor. This is an edge case that could potentially lead to unexpected results.
Execution:
  Arrange: Define a frequency, a samplerate, and a q_factor of zero.
  Act: Call the function with the defined parameters.
  Assert: Check that the returned object is an instance of IIRFilter and that the coefficients are correctly calculated for a zero q_factor.
Validation:
  This test ensures that the function can handle edge cases and produces the correct results for a zero q_factor.
"""

# ********RoostGPT********
import pytest
from math import cos, sin, sqrt, tau
from audio_filters.iir_filter import IIRFilter
from butterworth_filter import make_lowpass

class Test_ButterworthFilterMakeLowpass:

    @pytest.mark.regression
    def test_valid_lowpass_filter_creation(self):
        frequency = 1000
        samplerate = 48000
        q_factor = 1 / sqrt(2)
        filter = make_lowpass(frequency, samplerate, q_factor)
        assert isinstance(filter, IIRFilter)
        w0 = tau * frequency / samplerate
        _sin = sin(w0)
        _cos = cos(w0)
        alpha = _sin / (2 * q_factor)
        b0 = (1 - _cos) / 2
        b1 = 1 - _cos
        a0 = 1 + alpha
        a1 = -2 * _cos
        a2 = 1 - alpha
        assert filter.a_coeffs == [a0, a1, a2]
        assert filter.b_coeffs == [b0, b1, b0]

    @pytest.mark.edge
    def test_zero_frequency_handling(self):
        frequency = 0
        samplerate = 48000
        q_factor = 1 / sqrt(2)
        filter = make_lowpass(frequency, samplerate, q_factor)
        assert isinstance(filter, IIRFilter)
        assert filter.b_coeffs == [0.5, 1, 0.5]
        assert filter.a_coeffs == [1, 0, 0]

    @pytest.mark.edge
    def test_negative_frequency_handling(self):
        frequency = -1000
        samplerate = 48000
        q_factor = 1 / sqrt(2)
        filter = make_lowpass(frequency, samplerate, q_factor)
        assert isinstance(filter, IIRFilter)
        w0 = tau * abs(frequency) / samplerate
        _sin = sin(w0)
        _cos = cos(w0)
        alpha = _sin / (2 * q_factor)
        b0 = (1 - _cos) / 2
        b1 = 1 - _cos
        a0 = 1 + alpha
        a1 = -2 * _cos
        a2 = 1 - alpha
        assert filter.a_coeffs == [a0, a1, a2]
        assert filter.b_coeffs == [b0, b1, b0]

    @pytest.mark.edge
    def test_zero_q_factor_handling(self):
        frequency = 1000
        samplerate = 48000
        q_factor = 0
        filter = make_lowpass(frequency, samplerate, q_factor)
        assert isinstance(filter, IIRFilter)
        w0 = tau * frequency / samplerate
        _sin = sin(w0)
        _cos = cos(w0)
        alpha = _sin / (2 * q_factor) if q_factor != 0 else 0
        b0 = (1 - _cos) / 2
        b1 = 1 - _cos
        a0 = 1 + alpha
        a1 = -2 * _cos
        a2 = 1 - alpha
        assert filter.a_coeffs == [a0, a1, a2]
        assert filter.b_coeffs == [b0, b1, b0]
