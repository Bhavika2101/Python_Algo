# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit--test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=make_lowpass_c429b6062d
ROOST_METHOD_SIG_HASH=make_lowpass_c429b6062d

================================VULNERABILITIES================================
Vulnerability: Input validation (CWE-20)
Issue: The function make_lowpass does not check if the input parameters are of correct types and within the expected ranges. This can lead to unexpected behavior or crashes.
Solution: Add input validation checks at the start of the function to ensure that 'frequency' and 'samplerate' are positive integers, and 'q_factor' is a positive float.

Vulnerability: Dependency security (CWE-937)
Issue: The code relies on the third-party package 'audio_filters'. If this package has vulnerabilities or is not maintained regularly, it can pose a security risk.
Solution: Ensure that 'audio_filters' package is up-to-date and regularly maintained. Check its source code or use a trusted software composition analysis tool to identify potential security issues.

================================================================================
Scenario 1: Validate the creation of a valid low-pass filter
Details:
  TestName: test_valid_lowpass_filter_creation
  Description: This test is intended to verify that the function can create a valid low-pass filter based on the provided parameters. This is the core functionality of the function and must operate as expected.
Execution:
  Arrange: Define a frequency, samplerate, and q_factor.
  Act: Invoke the function with the defined parameters.
  Assert: Check that the returned object is an instance of IIRFilter and that the coefficients match the expected values.
Validation:
  This test ensures that the function can create a low-pass filter, which is its primary purpose. The correct coefficients are essential for the filter to function correctly.

Scenario 2: Validate behavior with a zero Q factor
Details:
  TestName: test_zero_q_factor
  Description: This test is intended to verify that the function handles a zero Q factor appropriately. This is an edge case that could potentially cause division by zero.
Execution:
  Arrange: Define a frequency and samplerate, and set q_factor to zero.
  Act: Invoke the function with the defined parameters.
  Assert: Check that the function raises an appropriate exception.
Validation:
  This test ensures that the function can handle edge cases without crashing or returning incorrect results. The function's ability to handle edge cases correctly is essential for robustness and reliability.

Scenario 3: Validate behavior with a negative frequency
Details:
  TestName: test_negative_frequency
  Description: This test is intended to verify that the function handles a negative frequency appropriately. This is an edge case that could potentially cause incorrect results.
Execution:
  Arrange: Define a samplerate and q_factor, and set frequency to a negative value.
  Act: Invoke the function with the defined parameters.
  Assert: Check that the function raises an appropriate exception.
Validation:
  This test ensures that the function can handle edge cases without crashing or returning incorrect results. The function's ability to handle edge cases correctly is essential for robustness and reliability.

Scenario 4: Validate behavior with a zero samplerate
Details:
  TestName: test_zero_samplerate
  Description: This test is intended to verify that the function handles a zero samplerate appropriately. This is an edge case that could potentially cause division by zero.
Execution:
  Arrange: Define a frequency and q_factor, and set samplerate to zero.
  Act: Invoke the function with the defined parameters.
  Assert: Check that the function raises an appropriate exception.
Validation:
  This test ensures that the function can handle edge cases without crashing or returning incorrect results. The function's ability to handle edge cases correctly is essential for robustness and reliability.
"""

# ********RoostGPT********
import pytest
from math import cos, sin, sqrt, tau
from butterworth_filter import make_lowpass
from audio_filters.iir_filter import IIRFilter

class Test_ButterworthFilterMakeLowpass:

    def test_valid_lowpass_filter_creation(self):
        # Arrange
        frequency = 1000
        samplerate = 48000
        q_factor = 1 / sqrt(2)

        # Act
        filter = make_lowpass(frequency, samplerate, q_factor)

        # Assert
        assert isinstance(filter, IIRFilter)
        assert filter.a_coeffs + filter.b_coeffs == [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.004277569313094809,
     0.008555138626189618, 0.004277569313094809]
    
    def test_zero_q_factor(self):
        # Arrange
        frequency = 1000
        samplerate = 48000
        q_factor = 0

        # Assert
        with pytest.raises(ZeroDivisionError):
            # Act
            make_lowpass(frequency, samplerate, q_factor)
        
    def test_negative_frequency(self):
        # Arrange
        frequency = -1000
        samplerate = 48000
        q_factor = 1 / sqrt(2)

        # Assert
        with pytest.raises(ValueError):
            # Act
            make_lowpass(frequency, samplerate, q_factor)
        
    def test_zero_samplerate(self):
        # Arrange
        frequency = 1000
        samplerate = 0
        q_factor = 1 / sqrt(2)

        # Assert
        with pytest.raises(ZeroDivisionError):
            # Act
            make_lowpass(frequency, samplerate, q_factor)
