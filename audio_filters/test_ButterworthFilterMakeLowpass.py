# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit--test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=make_lowpass_c429b6062d
ROOST_METHOD_SIG_HASH=make_lowpass_c429b6062d

Scenario 1: Lowpass Filter Creation with Valid Parameters
Details:
  TestName: test_lowpass_filter_creation_valid_parameters
  Description: This test is designed to verify the correct initialization of the lowpass filter when provided with valid frequency, samplerate and q_factor parameters.
Execution:
  Arrange: Initialize valid frequency, samplerate and q_factor parameters.
  Act: Call the make_lowpass function with the initialized parameters.
  Assert: The function should return an instance of IIRFilter with a_coeffs and b_coeffs correctly set according to the input parameters.
Validation:
  This test is important as it checks the basic functionality of the make_lowpass function. The expected result aligns with the function's specifications to create a lowpass filter with the provided parameters.

Scenario 2: Lowpass Filter Creation with Zero Frequency
Details:
  TestName: test_lowpass_filter_creation_zero_frequency
  Description: This test verifies the behavior of the make_lowpass function when provided with a frequency of zero.
Execution:
  Arrange: Initialize frequency as zero, and valid samplerate and q_factor parameters.
  Act: Call the make_lowpass function with the initialized parameters.
  Assert: The function should raise a ValueError, as a zero frequency is not valid for a lowpass filter.
Validation:
  This test is important as it checks the function's ability to handle invalid input parameters. The expected result aligns with the function's specifications to not allow a zero frequency.

Scenario 3: Lowpass Filter Creation with Negative Q Factor
Details:
  TestName: test_lowpass_filter_creation_negative_q_factor
  Description: This test verifies the behavior of the make_lowpass function when provided with a negative q_factor.
Execution:
  Arrange: Initialize a negative q_factor, and valid frequency and samplerate parameters.
  Act: Call the make_lowpass function with the initialized parameters.
  Assert: The function should raise a ValueError, as a negative q_factor is not valid for a lowpass filter.
Validation:
  This test is important as it checks the function's ability to handle invalid input parameters. The expected result aligns with the function's specifications to not allow a negative q_factor.

Scenario 4: Lowpass Filter Creation with Samplerate less than Twice the Frequency (Nyquist Theorem)
Details:
  TestName: test_lowpass_filter_creation_samplerate_less_than_twice_frequency
  Description: This test verifies the behavior of the make_lowpass function when provided with a samplerate less than twice the frequency, which violates the Nyquist theorem.
Execution:
  Arrange: Initialize a samplerate less than twice the frequency, with valid frequency and q_factor parameters.
  Act: Call the make_lowpass function with the initialized parameters.
  Assert: The function should raise a ValueError, as per the Nyquist theorem, the samplerate should be at least twice the frequency.
Validation:
  This test is crucial as it checks the function's compliance with the Nyquist theorem. The expected result aligns with the function's specifications and the fundamental principles of signal processing.
"""

# ********RoostGPT********
import pytest
from math import sqrt
from audio_filters.iir_filter import IIRFilter
from audio_filters.butterworth_filter import make_lowpass

class Test_ButterworthFilterMakeLowpass:
    @pytest.mark.positive
    def test_lowpass_filter_creation_valid_parameters(self):
        frequency = 1000
        samplerate = 48000
        q_factor = 1 / sqrt(2)
        expected_a_coeffs = [1.0922959556412573, -1.9828897227476208, 0.9077040443587427]
        expected_b_coeffs = [0.004277569313094809, 0.008555138626189618, 0.004277569313094809]
        filter_instance = make_lowpass(frequency, samplerate, q_factor)
        assert isinstance(filter_instance, IIRFilter)
        assert filter_instance.a_coeffs == expected_a_coeffs
        assert filter_instance.b_coeffs == expected_b_coeffs

    @pytest.mark.negative
    def test_lowpass_filter_creation_zero_frequency(self):
        frequency = 0
        samplerate = 48000
        q_factor = 1 / sqrt(2)
        with pytest.raises(ValueError):
            make_lowpass(frequency, samplerate, q_factor)

    @pytest.mark.negative
    def test_lowpass_filter_creation_negative_q_factor(self):
        frequency = 1000
        samplerate = 48000
        q_factor = -1 / sqrt(2)
        with pytest.raises(ValueError):
            make_lowpass(frequency, samplerate, q_factor)

    @pytest.mark.negative
    def test_lowpass_filter_creation_samplerate_less_than_twice_frequency(self):
        frequency = 1000
        samplerate = 1500
        q_factor = 1 / sqrt(2)
        with pytest.raises(ValueError):
            make_lowpass(frequency, samplerate, q_factor)
