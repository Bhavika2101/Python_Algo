# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit--test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=make_peak_c1329dbc09
ROOST_METHOD_SIG_HASH=make_peak_c1329dbc09

```
Scenario 1: Verify the make_peak function with valid input parameters.
Details:
  TestName: test_make_peak_with_valid_parameters
  Description: This test is intended to verify the correct functionality of the make_peak function when provided with valid input parameters.
Execution:
  Arrange: Initialize the input parameters with valid values.
  Act: Call the make_peak function with the initialized parameters.
  Assert: Check if the returned IIRFilter object has correct coefficients.
Validation:
  This test is important to ensure that the make_peak function correctly implements the peak filter creation functionality as per specifications. The expected result is the correct IIRFilter object, which shows that the function correctly calculates and sets the filter coefficients.

Scenario 2: Verify the make_peak function with a gain of 0 dB.
Details:
  TestName: test_make_peak_with_zero_gain
  Description: This test is intended to verify the correct functionality of the make_peak function when the gain is set to 0 dB.
Execution:
  Arrange: Initialize the input parameters, setting the gain_db to 0.
  Act: Call the make_peak function with the initialized parameters.
  Assert: Check if the returned IIRFilter object has coefficients indicating a flat frequency response.
Validation:
  This test is important to ensure that the make_peak function correctly handles the case when the gain is 0 dB. The expected result is an IIRFilter object that represents a filter with a flat frequency response, which aligns with the definition of a peak filter with 0 dB gain.

Scenario 3: Verify the make_peak function with a negative gain.
Details:
  TestName: test_make_peak_with_negative_gain
  Description: This test is intended to verify the correct functionality of the make_peak function when the gain is negative.
Execution:
  Arrange: Initialize the input parameters, setting the gain_db to a negative value.
  Act: Call the make_peak function with the initialized parameters.
  Assert: Check if the returned IIRFilter object has coefficients indicating a notch filter.
Validation:
  This test is important to ensure that the make_peak function correctly handles the case when the gain is negative. The expected result is an IIRFilter object that represents a notch filter, which aligns with the definition of a peak filter with a negative gain.

Scenario 4: Validate the exception handling when the frequency is greater than half of the sampling rate.
Details:
  TestName: test_make_peak_with_invalid_frequency
  Description: This test is intended to verify the exception handling of the make_peak function when the input frequency is greater than half of the sampling rate.
Execution:
  Arrange: Initialize the input parameters, setting the frequency to a value greater than half of the sampling rate.
  Act: Call the make_peak function with the initialized parameters.
  Assert: Check if the function raises an exception.
Validation:
  This test is important to ensure that the make_peak function correctly handles invalid input parameters. The expected result is an exception, which shows that the function correctly validates the input parameters and rejects invalid values.
```

"""

# ********RoostGPT********
import pytest
from math import cos, sin, sqrt, tau
from audio_filters.iir_filter import IIRFilter
from audio_filters.butterworth_filter import make_peak

class Test_ButterworthFilterMakePeak:

    @pytest.mark.regression
    def test_make_peak_with_valid_parameters(self):
        # Arrange
        frequency = 1000
        samplerate = 48000
        gain_db = 6
        q_factor = 1 / sqrt(2)
        # Act
        filter = make_peak(frequency, samplerate, gain_db, q_factor)
        # Assert
        assert isinstance(filter, IIRFilter)
        assert len(filter.a_coeffs) == 3
        assert len(filter.b_coeffs) == 3

    @pytest.mark.regression
    def test_make_peak_with_zero_gain(self):
        # Arrange
        frequency = 1000
        samplerate = 48000
        gain_db = 0
        q_factor = 1 / sqrt(2)
        # Act
        filter = make_peak(frequency, samplerate, gain_db, q_factor)
        # Assert
        assert isinstance(filter, IIRFilter)
        assert filter.a_coeffs[0] == 1
        assert filter.b_coeffs[0] == 1

    @pytest.mark.regression
    def test_make_peak_with_negative_gain(self):
        # Arrange
        frequency = 1000
        samplerate = 48000
        gain_db = -6
        q_factor = 1 / sqrt(2)
        # Act
        filter = make_peak(frequency, samplerate, gain_db, q_factor)
        # Assert
        assert isinstance(filter, IIRFilter)
        assert filter.a_coeffs[0] > filter.b_coeffs[0]

    @pytest.mark.regression
    def test_make_peak_with_invalid_frequency(self):
        # Arrange
        frequency = 50000
        samplerate = 48000
        gain_db = 6
        q_factor = 1 / sqrt(2)
        # Act & Assert
        with pytest.raises(ValueError):
            make_peak(frequency, samplerate, gain_db, q_factor)
