# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit--test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=make_peak_c1329dbc09
ROOST_METHOD_SIG_HASH=make_peak_c1329dbc09

================================VULNERABILITIES================================
Vulnerability: None
Issue: No security issues were detected in the provided Python code.
Solution: N/A

================================================================================
Scenario 1: Test that the peak filter is created correctly with valid parameters
Details:
  TestName: test_make_peak_with_valid_parameters
  Description: This test is intended to verify that the make_peak function correctly creates a peak filter when provided with valid parameters.
Execution:
  Arrange: No setup is required as this is a static function.
  Act: Invoke the make_peak function with valid parameters.
  Assert: Check that the returned IIRFilter object has the correct a_coeffs and b_coeffs.
Validation:
  This test is important because it verifies that the make_peak function correctly creates a peak filter, which is its main purpose.

Scenario 2: Test that the peak filter is created correctly with a gain of 0dB
Details:
  TestName: test_make_peak_with_zero_gain
  Description: This test is intended to verify that the make_peak function correctly creates a peak filter when the gain is 0dB.
Execution:
  Arrange: No setup is required as this is a static function.
  Act: Invoke the make_peak function with a gain_db parameter of 0.
  Assert: Check that the returned IIRFilter object has the correct a_coeffs and b_coeffs.
Validation:
  This test is important because it checks that the make_peak function correctly handles a gain of 0dB, which is a special case that could potentially cause problems.

Scenario 3: Test that the peak filter is created correctly with a q_factor of 0
Details:
  TestName: test_make_peak_with_zero_q_factor
  Description: This test is intended to verify that the make_peak function correctly creates a peak filter when the q_factor is 0.
Execution:
  Arrange: No setup is required as this is a static function.
  Act: Invoke the make_peak function with a q_factor parameter of 0.
  Assert: Check that the returned IIRFilter object has the correct a_coeffs and b_coeffs.
Validation:
  This test is important because it checks that the make_peak function correctly handles a q_factor of 0, which is a special case that could potentially cause problems.

Scenario 4: Test that the peak filter is created correctly with a frequency of 0
Details:
  TestName: test_make_peak_with_zero_frequency
  Description: This test is intended to verify that the make_peak function correctly creates a peak filter when the frequency is 0.
Execution:
  Arrange: No setup is required as this is a static function.
  Act: Invoke the make_peak function with a frequency parameter of 0.
  Assert: Check that the returned IIRFilter object has the correct a_coeffs and b_coeffs.
Validation:
  This test is important because it checks that the make_peak function correctly handles a frequency of 0, which is a special case that could potentially cause problems.

Scenario 5: Test that the peak filter is created correctly with a samplerate of 0
Details:
  TestName: test_make_peak_with_zero_samplerate
  Description: This test is intended to verify that the make_peak function correctly creates a peak filter when the samplerate is 0.
Execution:
  Arrange: No setup is required as this is a static function.
  Act: Invoke the make_peak function with a samplerate parameter of 0.
  Assert: Check that the returned IIRFilter object has the correct a_coeffs and b_coeffs.
Validation:
  This test is important because it checks that the make_peak function correctly handles a samplerate of 0, which is a special case that could potentially cause problems.
"""

# ********RoostGPT********
import pytest
from math import cos, sin, sqrt, tau
from audio_filters.iir_filter import IIRFilter
from butterworth_filter import make_peak

class Test_ButterworthFilterMakePeak:
    
    def test_make_peak_with_valid_parameters(self):
        # Act
        filter = make_peak(1000, 48000, 6)
        
        # Assert
        assert filter.a_coeffs + filter.b_coeffs == [1.0653405327119334, -1.9828897227476208, 0.9346594672880666, 1.1303715025601122, -1.9828897227476208, 0.8696284974398878]

    def test_make_peak_with_zero_gain(self):
        # Act
        filter = make_peak(1000, 48000, 0)

        # Assert
        assert filter.a_coeffs + filter.b_coeffs == [1.0, -1.9828897227476208, 0.8696284974398878, 1.0, -1.9828897227476208, 0.8696284974398878]

    def test_make_peak_with_zero_q_factor(self):
        # Act
        filter = make_peak(1000, 48000, 6, 0)

        # Assert
        assert filter.a_coeffs + filter.b_coeffs == [1.0, -1.9828897227476208, 0.0, 1.0, -1.9828897227476208, 0.0]

    def test_make_peak_with_zero_frequency(self):
        # Act
        filter = make_peak(0, 48000, 6)

        # Assert
        assert filter.a_coeffs + filter.b_coeffs == [1.0, 0.0, -1.0, 1.0, 0.0, -1.0]

    def test_make_peak_with_zero_samplerate(self):
        # Act
        filter = make_peak(1000, 0, 6)

        # Assert
        assert filter.a_coeffs + filter.b_coeffs == [1.0, 0.0, -1.0, 1.0, 0.0, -1.0]
