# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit--test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=make_peak_c1329dbc09
ROOST_METHOD_SIG_HASH=make_peak_c1329dbc09

Scenario 1: Verify the IIRFilter coefficients for specific input values
Details:
  TestName: test_make_peak_coefficients
  Description: This test is intended to verify that the function make_peak produces the correct IIRFilter coefficients for a given set of input values.
Execution:
  Arrange: Initialize the input parameters frequency, samplerate, gain_db, and q_factor with specific values.
  Act: Call the make_peak function with the initialized parameters.
  Assert: Check if the returned IIRFilter object's coefficients match the expected coefficients.
Validation:
  Rationalize the importance of the test: This test ensures that the function correctly calculates and sets the coefficients of the IIRFilter, which is a fundamental part of its functionality.

Scenario 2: Verify the function behavior with maximum frequency
Details:
  TestName: test_make_peak_max_frequency
  Description: This test is intended to verify that the function make_peak correctly handles the maximum possible frequency value.
Execution:
  Arrange: Initialize the frequency parameter with the maximum possible value, and set the other parameters to arbitrary values.
  Act: Call the make_peak function with the initialized parameters.
  Assert: Check if the returned IIRFilter object's coefficients are valid (not NaN or infinity).
Validation:
  Rationalize the importance of the test: This test ensures that the function can handle the edge case of the maximum frequency value without producing invalid results.

Scenario 3: Verify the function behavior with minimum frequency
Details:
  TestName: test_make_peak_min_frequency
  Description: This test is intended to verify that the function make_peak correctly handles the minimum possible frequency value.
Execution:
  Arrange: Initialize the frequency parameter with the minimum possible value, and set the other parameters to arbitrary values.
  Act: Call the make_peak function with the initialized parameters.
  Assert: Check if the returned IIRFilter object's coefficients are valid (not NaN or infinity).
Validation:
  Rationalize the importance of the test: This test ensures that the function can handle the edge case of the minimum frequency value without producing invalid results.

Scenario 4: Verify the function behavior with zero gain
Details:
  TestName: test_make_peak_zero_gain
  Description: This test is intended to verify that the function make_peak correctly handles a gain value of zero.
Execution:
  Arrange: Initialize the gain_db parameter with the value of zero, and set the other parameters to arbitrary values.
  Act: Call the make_peak function with the initialized parameters.
  Assert: Check if the returned IIRFilter object's coefficients are valid and correspond to a neutral filter (i.e., no change in the signal).
Validation:
  Rationalize the importance of the test: This test ensures that the function can handle the special case of zero gain, which should result in a neutral filter. 

Scenario 5: Verify error handling when q_factor is zero
Details:
  TestName: test_make_peak_zero_q_factor
  Description: This test is intended to verify that the function make_peak correctly handles a q_factor value of zero, which should result in an error as it would cause a division by zero.
Execution:
  Arrange: Initialize the q_factor parameter with the value of zero, and set the other parameters to arbitrary values.
  Act: Call the make_peak function with the initialized parameters.
  Assert: Check if the function raises an appropriate error.
Validation:
  Rationalize the importance of the test: This test ensures that the function correctly handles invalid input values and prevents division by zero errors.
"""

# ********RoostGPT********
import pytest
from math import cos, sin, sqrt, tau, isinf, isnan
from audio_filters.iir_filter import IIRFilter
from audio_filters.butterworth import make_peak

class Test_ButterworthFilterMakePeak:

    def test_make_peak_coefficients(self):
        # Arrange
        frequency = 1000
        samplerate = 48000
        gain_db = 6
        q_factor = 1 / sqrt(2)

        # Expected coefficients
        expected_a_coeffs = [1.0653405327119334, -1.9828897227476208, 0.9346594672880666]
        expected_b_coeffs = [1.1303715025601122, -1.9828897227476208, 0.8696284974398878]

        # Act
        filter = make_peak(frequency, samplerate, gain_db, q_factor)

        # Assert
        assert filter.a_coeffs == expected_a_coeffs
        assert filter.b_coeffs == expected_b_coeffs

    def test_make_peak_max_frequency(self):
        # Arrange
        max_frequency = 2**31 - 1  # Maximum value for a 32-bit integer
        samplerate = 48000
        gain_db = 6
        q_factor = 1 / sqrt(2)

        # Act
        filter = make_peak(max_frequency, samplerate, gain_db, q_factor)

        # Assert
        assert not any(isinf(coeff) or isnan(coeff) for coeff in filter.a_coeffs)
        assert not any(isinf(coeff) or isnan(coeff) for coeff in filter.b_coeffs)

    def test_make_peak_min_frequency(self):
        # Arrange
        min_frequency = -2**31  # Minimum value for a 32-bit integer
        samplerate = 48000
        gain_db = 6
        q_factor = 1 / sqrt(2)

        # Act
        filter = make_peak(min_frequency, samplerate, gain_db, q_factor)

        # Assert
        assert not any(isinf(coeff) or isnan(coeff) for coeff in filter.a_coeffs)
        assert not any(isinf(coeff) or isnan(coeff) for coeff in filter.b_coeffs)

    def test_make_peak_zero_gain(self):
        # Arrange
        frequency = 1000
        samplerate = 48000
        gain_db = 0
        q_factor = 1 / sqrt(2)

        # Act
        filter = make_peak(frequency, samplerate, gain_db, q_factor)

        # Assert
        assert filter.a_coeffs == [1.0, 0.0, 0.0]
        assert filter.b_coeffs == [1.0, 0.0, 0.0]

    def test_make_peak_zero_q_factor(self):
        # Arrange
        frequency = 1000
        samplerate = 48000
        gain_db = 6
        q_factor = 0

        # Act & Assert
        with pytest.raises(ZeroDivisionError):
            make_peak(frequency, samplerate, gain_db, q_factor)
