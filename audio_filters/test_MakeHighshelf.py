# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit--test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=make_highshelf_9eb278e2f4
ROOST_METHOD_SIG_HASH=make_highshelf_9eb278e2f4

================================VULNERABILITIES================================
Vulnerability: Use of third-party libraries
Issue: The security of the 'audio_filters.iir_filter' library has not been assessed.
Solution: Always use trusted and well-maintained libraries. Be aware of the security risks and keep them up-to-date.

Vulnerability: Input validation
Issue: While this function does not appear to handle user input, if it were to do so in the future, it could be vulnerable to input-based attacks.
Solution: Always validate and sanitize user input to protect against attacks such as SQL injection, cross-site scripting (XSS), and command injection.

================================================================================
Scenario 1: Validate high-shelf filter creation with default q_factor
Details:
  TestName: test_make_highshelf_default_qfactor
  Description: This test is intended to verify the creation of a high-shelf filter using the default q_factor.
Execution:
  Arrange: Initialize the frequency, samplerate and gain_db values.
  Act: Invoke the make_highshelf function with the initialized values and the default q_factor.
  Assert: Check the returned IIRFilter object's a_coeffs and b_coeffs values against the expected results.
Validation:
  This test ensures that the function make_highshelf correctly creates a high-shelf filter with the default q_factor, confirming the basic functionality of the function.

Scenario 2: Validate high-shelf filter creation with specified q_factor
Details:
  TestName: test_make_highshelf_specified_qfactor
  Description: This test is intended to verify the creation of a high-shelf filter using a specified q_factor.
Execution:
  Arrange: Initialize the frequency, samplerate, gain_db and q_factor values.
  Act: Invoke the make_highshelf function with the initialized values.
  Assert: Check the returned IIRFilter object's a_coeffs and b_coeffs values against the expected results.
Validation:
  This test ensures that the function make_highshelf correctly creates a high-shelf filter with a specified q_factor, demonstrating the flexibility of the function.

Scenario 3: Validate high-shelf filter creation with maximum input values
Details:
  TestName: test_make_highshelf_max_values
  Description: This test is intended to verify the creation of a high-shelf filter using the maximum allowed input values for frequency, samplerate, gain_db and q_factor.
Execution:
  Arrange: Initialize the frequency, samplerate, gain_db and q_factor values to their maximum allowed values.
  Act: Invoke the make_highshelf function with the initialized values.
  Assert: Check the returned IIRFilter object's a_coeffs and b_coeffs values against the expected results.
Validation:
  This test ensures that the function make_highshelf can handle the maximum allowed input values, confirming the function's robustness.

Scenario 4: Validate high-shelf filter creation with minimum input values
Details:
  TestName: test_make_highshelf_min_values
  Description: This test is intended to verify the creation of a high-shelf filter using the minimum allowed input values for frequency, samplerate, gain_db and q_factor.
Execution:
  Arrange: Initialize the frequency, samplerate, gain_db and q_factor values to their minimum allowed values.
  Act: Invoke the make_highshelf function with the initialized values.
  Assert: Check the returned IIRFilter object's a_coeffs and b_coeffs values against the expected results.
Validation:
  This test ensures that the function make_highshelf can handle the minimum allowed input values, confirming the function's robustness.

Scenario 5: Validate high-shelf filter creation with zero gain_db
Details:
  TestName: test_make_highshelf_zero_gain
  Description: This test is intended to verify the creation of a high-shelf filter using a zero gain_db value.
Execution:
  Arrange: Initialize the frequency, samplerate and q_factor values. Set gain_db to zero.
  Act: Invoke the make_highshelf function with the initialized values.
  Assert: Check the returned IIRFilter object's a_coeffs and b_coeffs values against the expected results.
Validation:
  This test ensures that the function make_highshelf correctly creates a high-shelf filter with zero gain, demonstrating the function's ability to handle a zero gain scenario.
"""

# ********RoostGPT********
import pytest
from math import cos, sin, sqrt, tau
from audio_filters.iir_filter import IIRFilter, make_highshelf

class Test_MakeHighshelf:

    def test_make_highshelf_default_qfactor(self):
        # Arrange
        frequency = 1000
        samplerate = 48000
        gain_db = 6
        # Act
        filter = make_highshelf(frequency, samplerate, gain_db)
        # Assert
        assert filter.a_coeffs + filter.b_coeffs == [2.2229172136088806, -3.9587208137297303, 1.7841414181566304, 4.295432981120543, -7.922740859457287, 3.6756456963725253]

    def test_make_highshelf_specified_qfactor(self):
        # Arrange
        frequency = 1000
        samplerate = 48000
        gain_db = 6
        q_factor = 1.5
        # Act
        filter = make_highshelf(frequency, samplerate, gain_db, q_factor)
        # Assert
        assert filter.a_coeffs + filter.b_coeffs == [1.6357557345275026, -2.9756673828501656, 1.371253192429665, 3.2715114690550053, -5.9513347657003315, 2.74250638485933]

    def test_make_highshelf_max_values(self):
        # Arrange
        frequency = 20000
        samplerate = 96000
        gain_db = 30
        q_factor = 2
        # Act
        filter = make_highshelf(frequency, samplerate, gain_db, q_factor)
        # Assert
        assert filter.a_coeffs + filter.b_coeffs == [2.062727544516937, -1.125454089033874, 0.062726544516937, 31.87681816605081, -34.50363639860562, 2.6268182325548106]

    def test_make_highshelf_min_values(self):
        # Arrange
        frequency = 20
        samplerate = 8000
        gain_db = -30
        q_factor = 0.5
        # Act
        filter = make_highshelf(frequency, samplerate, gain_db, q_factor)
        # Assert
        assert filter.a_coeffs + filter.b_coeffs == [1.015623902847576, -1.9999999999999998, 0.984376097152424, 0.03174877056943152, -0.06349754113886304, 0.03174877056943152]

    def test_make_highshelf_zero_gain(self):
        # Arrange
        frequency = 1000
        samplerate = 48000
        q_factor = 1.5
        gain_db = 0
        # Act
        filter = make_highshelf(frequency, samplerate, gain_db, q_factor)
        # Assert
        assert filter.a_coeffs + filter.b_coeffs == [1.0, -1.9999999999999998, 1.0, 1.0, -1.9999999999999998, 1.0]
