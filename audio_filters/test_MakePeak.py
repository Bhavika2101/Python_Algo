# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit--test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=make_peak_c1329dbc09
ROOST_METHOD_SIG_HASH=make_peak_c1329dbc09

Scenario 1: Create a peak filter with default q_factor
Details:
  TestName: test_make_peak_with_default_q_factor
  Description: This test is intended to verify the correct creation of a peak filter when the q_factor is not provided.
Execution:
  Arrange: No special arrangement is needed since we are not using any external resources.
  Act: Invoke the make_peak function with a frequency, a samplerate and a gain_db.
  Assert: Check that the returned filter's coefficients match the expected values.
Validation:
  This test is important to ensure that the make_peak function can create a peak filter with correct coefficients when the q_factor is not provided.

Scenario 2: Create a peak filter with custom q_factor
Details:
  TestName: test_make_peak_with_custom_q_factor
  Description: This test is intended to verify the correct creation of a peak filter when a custom q_factor is provided.
Execution:
  Arrange: No special arrangement is needed since we are not using any external resources.
  Act: Invoke the make_peak function with a frequency, a samplerate, a gain_db and a custom q_factor.
  Assert: Check that the returned filter's coefficients match the expected values.
Validation:
  This test is important to ensure that the make_peak function can create a peak filter with correct coefficients when a custom q_factor is provided.

Scenario 3: Create a peak filter with a gain_db of zero
Details:
  TestName: test_make_peak_with_zero_gain_db
  Description: This test is intended to verify the correct creation of a peak filter when the gain_db is zero.
Execution:
  Arrange: No special arrangement is needed since we are not using any external resources.
  Act: Invoke the make_peak function with a frequency, a samplerate and a gain_db of zero.
  Assert: Check that the returned filter's coefficients match the expected values.
Validation:
  This test is important to ensure that the make_peak function can create a peak filter with correct coefficients when the gain_db is zero.

Scenario 4: Create a peak filter with a negative gain_db
Details:
  TestName: test_make_peak_with_negative_gain_db
  Description: This test is intended to verify the correct creation of a peak filter when the gain_db is negative.
Execution:
  Arrange: No special arrangement is needed since we are not using any external resources.
  Act: Invoke the make_peak function with a frequency, a samplerate and a negative gain_db.
  Assert: Check that the returned filter's coefficients match the expected values.
Validation:
  This test is important to ensure that the make_peak function can create a peak filter with correct coefficients when the gain_db is negative.

Scenario 5: Create a peak filter with a frequency that is higher than the samplerate
Details:
  TestName: test_make_peak_with_high_frequency
  Description: This test is intended to verify the correct creation of a peak filter when the frequency is higher than the samplerate.
Execution:
  Arrange: No special arrangement is needed since we are not using any external resources.
  Act: Invoke the make_peak function with a frequency that is higher than the samplerate, a gain_db and a q_factor.
  Assert: Check that the returned filter's coefficients match the expected values.
Validation:
  This test is important to ensure that the make_peak function can create a peak filter with correct coefficients even when the frequency is higher than the samplerate.
"""

# ********RoostGPT********
import pytest
from math import cos, sin, sqrt, tau
from audio_filters.iir_filter import IIRFilter, make_peak

class Test_MakePeak:
    def test_make_peak_with_default_q_factor(self):
        # Act
        filter = make_peak(1000, 48000, 6)
        
        # Assert
        assert filter.a_coeffs + filter.b_coeffs == [1.0653405327119334, -1.9828897227476208, 0.9346594672880666, 1.1303715025601122,
                                                     -1.9828897227476208, 0.8696284974398878]

    def test_make_peak_with_custom_q_factor(self):
        # Act
        filter = make_peak(1000, 48000, 6, 0.5)
        
        # Assert
        assert filter.a_coeffs + filter.b_coeffs == [1.0653405327119334, -1.9828897227476208, 0.9346594672880666, 1.1303715025601122,
                                                     -1.9828897227476208, 0.8696284974398878]

    def test_make_peak_with_zero_gain_db(self):
        # Act
        filter = make_peak(1000, 48000, 0)
        
        # Assert
        assert filter.a_coeffs + filter.b_coeffs == [1.0653405327119334, -1.9828897227476208, 0.9346594672880666, 1.1303715025601122,
                                                     -1.9828897227476208, 0.8696284974398878]

    def test_make_peak_with_negative_gain_db(self):
        # Act
        filter = make_peak(1000, 48000, -6)
        
        # Assert
        assert filter.a_coeffs + filter.b_coeffs == [1.0653405327119334, -1.9828897227476208, 0.9346594672880666, 1.1303715025601122,
                                                     -1.9828897227476208, 0.8696284974398878]

    def test_make_peak_with_high_frequency(self):
        # Act
        filter = make_peak(50000, 48000, 6)
        
        # Assert
        assert filter.a_coeffs + filter.b_coeffs == [1.0653405327119334, -1.9828897227476208, 0.9346594672880666, 1.1303715025601122,
                                                     -1.9828897227476208, 0.8696284974398878]
