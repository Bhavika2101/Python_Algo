# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit--test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=make_peak_c1329dbc09
ROOST_METHOD_SIG_HASH=make_peak_c1329dbc09

================================VULNERABILITIES================================
Vulnerability: Input Validation
Issue: The function 'make_peak' does not validate the input parameters. This can lead to unexpected behavior or crashes.
Solution: Add checks to ensure the 'frequency', 'samplerate', 'gain_db', and 'q_factor' are within expected ranges and types.

Vulnerability: Dependence on External Packages
Issue: The code relies on the 'audio_filters.iir_filter' package. If this package has vulnerabilities, they could be exploited.
Solution: Ensure the 'audio_filters.iir_filter' package is up to date and has been reviewed for security issues.

================================================================================
Scenario 1: Verify the IIRFilter coefficients for specific input values
Details:
  TestName: test_make_peak_coefficients
  Description: This test is intended to verify that the function make_peak produces the correct IIRFilter coefficients for a given set of input values.
Execution:
  Arrange: Initialize the input parameters frequency, samplerate, gain_db, and q_factor with specific values.
  Act: Call the make_peak function with the initialized parameters.
  Assert: Check if the returned IIRFilter object's coefficients match the expected coefficients.
Validation:
  Rationalize: This test is crucial to ensure that the make_peak function correctly calculates and sets the IIRFilter coefficients as per the business logic.

Scenario 2: Verify the behavior with minimum valid frequency
Details:
  TestName: test_make_peak_min_frequency
  Description: This test is intended to verify the behavior of the make_peak function when the frequency is at the minimum valid value of 1.
Execution:
  Arrange: Initialize the input parameters with frequency as 1 and other parameters with specific values.
  Act: Call the make_peak function with the initialized parameters.
  Assert: Check if the returned IIRFilter object is valid and its coefficients are as expected for this frequency.
Validation:
  Rationalize: This test ensures that the make_peak function can handle the edge case of minimum frequency.

Scenario 3: Verify the behavior with maximum valid frequency
Details:
  TestName: test_make_peak_max_frequency
  Description: This test is intended to verify the behavior of the make_peak function when the frequency is at the maximum valid value, which is half of the samplerate.
Execution:
  Arrange: Initialize the input parameters with frequency as half of the samplerate and other parameters with specific values.
  Act: Call the make_peak function with the initialized parameters.
  Assert: Check if the returned IIRFilter object is valid and its coefficients are as expected for this frequency.
Validation:
  Rationalize: This test ensures that the make_peak function can handle the edge case of maximum frequency.

Scenario 4: Verify the behavior with zero gain_db
Details:
  TestName: test_make_peak_zero_gain_db
  Description: This test is intended to verify the behavior of the make_peak function when the gain_db is zero.
Execution:
  Arrange: Initialize the input parameters with gain_db as 0 and other parameters with specific values.
  Act: Call the make_peak function with the initialized parameters.
  Assert: Check if the returned IIRFilter object is valid and its coefficients are as expected for this gain_db.
Validation:
  Rationalize: This test ensures that the make_peak function can handle the special case of zero gain_db.

Scenario 5: Verify the behavior with negative gain_db
Details:
  TestName: test_make_peak_negative_gain_db
  Description: This test is intended to verify the behavior of the make_peak function when the gain_db is negative.
Execution:
  Arrange: Initialize the input parameters with gain_db as a negative value and other parameters with specific values.
  Act: Call the make_peak function with the initialized parameters.
  Assert: Check if the returned IIRFilter object is valid and its coefficients are as expected for this gain_db.
Validation:
  Rationalize: This test ensures that the make_peak function can handle the special case of negative gain_db.
"""

# ********RoostGPT********
import pytest
from math import cos, sin, sqrt, tau
from audio_filters.iir_filter import IIRFilter
from audio_filters.make_peak import make_peak

class Test_MakePeak:

    @pytest.mark.regression
    def test_make_peak_coefficients(self):
        # Arrange
        frequency = 1000
        samplerate = 48000
        gain_db = 6
        q_factor = 1 / sqrt(2)
        expected_coeffs = [1.0653405327119334, -1.9828897227476208, 0.9346594672880666, 1.1303715025601122, -1.9828897227476208, 0.8696284974398878]
        
        # Act
        filter = make_peak(frequency, samplerate, gain_db, q_factor)

        # Assert
        assert filter.a_coeffs + filter.b_coeffs == pytest.approx(expected_coeffs)

    @pytest.mark.edge
    def test_make_peak_min_frequency(self):
        # Arrange
        frequency = 1
        samplerate = 48000
        gain_db = 6
        q_factor = 1 / sqrt(2)
        
        # Act
        filter = make_peak(frequency, samplerate, gain_db, q_factor)

        # Assert
        assert isinstance(filter, IIRFilter)
        assert filter.a_coeffs[0] > 0

    @pytest.mark.edge
    def test_make_peak_max_frequency(self):
        # Arrange
        frequency = 24000
        samplerate = 48000
        gain_db = 6
        q_factor = 1 / sqrt(2)
        
        # Act
        filter = make_peak(frequency, samplerate, gain_db, q_factor)

        # Assert
        assert isinstance(filter, IIRFilter)
        assert filter.a_coeffs[0] > 0

    @pytest.mark.regression
    def test_make_peak_zero_gain_db(self):
        # Arrange
        frequency = 1000
        samplerate = 48000
        gain_db = 0
        q_factor = 1 / sqrt(2)
        
        # Act
        filter = make_peak(frequency, samplerate, gain_db, q_factor)

        # Assert
        assert isinstance(filter, IIRFilter)
        assert filter.a_coeffs[0] > 0

    @pytest.mark.regression
    def test_make_peak_negative_gain_db(self):
        # Arrange
        frequency = 1000
        samplerate = 48000
        gain_db = -6
        q_factor = 1 / sqrt(2)
        
        # Act
        filter = make_peak(frequency, samplerate, gain_db, q_factor)

        # Assert
        assert isinstance(filter, IIRFilter)
        assert filter.a_coeffs[0] > 0
