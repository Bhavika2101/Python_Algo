# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit--test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=make_lowpass_c429b6062d
ROOST_METHOD_SIG_HASH=make_lowpass_c429b6062d

================================VULNERABILITIES================================
Vulnerability: Input validation (CWE-20)
Issue: The function make_lowpass does not check if the input parameters are of correct types and within the expected ranges. This can lead to unexpected behavior or crashes.
Solution: Add input validation checks at the start of the function to ensure that 'frequency' and 'samplerate' are integers, 'q_factor' is a float, and all are within expected ranges.

Vulnerability: Uncaught exceptions (CWE-390)
Issue: If the 'frequency' input is set to zero, it will cause a division by zero error when calculating 'w0'. This can cause the application to crash.
Solution: Add a check at the start of the function to ensure 'frequency' is not zero and handle the exception appropriately.

Vulnerability: Insecure use of 3rd party library (CWE-829)
Issue: The code uses the 'IIRFilter' class from the 'audio_filters.iir_filter' package but does not check if the package is up-to-date and free from known vulnerabilities.
Solution: Ensure that the 'audio_filters' package is regularly updated to the latest version. Use a tool such as PyUp Safety to check for known vulnerabilities in the package.

================================================================================
Scenario 1: Testing make_lowpass with valid frequency, samplerate and q_factor
Details:
  TestName: test_make_lowpass_with_valid_params
  Description: This test verifies that the make_lowpass function works correctly when provided with valid frequency, samplerate and q_factor.
Execution:
  Arrange: No specific setup required.
  Act: Invoke the function make_lowpass with valid frequency, samplerate and q_factor.
  Assert: Check the returned IIRFilter object's a_coeffs and b_coeffs attributes are as expected.
Validation:
  This test ensures that the make_lowpass function correctly creates a low-pass filter with the given parameters.

Scenario 2: Testing make_lowpass with frequency greater than samplerate
Details:
  TestName: test_make_lowpass_with_frequency_greater_than_samplerate
  Description: This test verifies that the make_lowpass function handles the case where the frequency is greater than the samplerate.
Execution:
  Arrange: No specific setup required.
  Act: Invoke the function make_lowpass with frequency greater than samplerate.
  Assert: Check the returned IIRFilter object's a_coeffs and b_coeffs attributes are as expected.
Validation:
  This test ensures that the make_lowpass function correctly creates a low-pass filter even when the frequency is greater than the samplerate.

Scenario 3: Testing make_lowpass with frequency equal to zero
Details:
  TestName: test_make_lowpass_with_zero_frequency
  Description: This test verifies that the make_lowpass function handles the case where the frequency is zero.
Execution:
  Arrange: No specific setup required.
  Act: Invoke the function make_lowpass with frequency equals to zero.
  Assert: Check the returned IIRFilter object's a_coeffs and b_coeffs attributes are as expected.
Validation:
  This test ensures that the make_lowpass function correctly creates a low-pass filter even when the frequency is zero.

Scenario 4: Testing make_lowpass with negative q_factor
Details:
  TestName: test_make_lowpass_with_negative_q_factor
  Description: This test verifies that the make_lowpass function handles the case where the q_factor is negative.
Execution:
  Arrange: No specific setup required.
  Act: Invoke the function make_lowpass with negative q_factor.
  Assert: Check the returned IIRFilter object's a_coeffs and b_coeffs attributes are as expected.
Validation:
  This test ensures that the make_lowpass function correctly creates a low-pass filter even when the q_factor is negative.

Scenario 5: Testing make_lowpass with q_factor equals to zero
Details:
  TestName: test_make_lowpass_with_zero_q_factor
  Description: This test verifies that the make_lowpass function handles the case where the q_factor is zero.
Execution:
  Arrange: No specific setup required.
  Act: Invoke the function make_lowpass with q_factor equals to zero.
  Assert: Check the returned IIRFilter object's a_coeffs and b_coeffs attributes are as expected.
Validation:
  This test ensures that the make_lowpass function correctly creates a low-pass filter even when the q_factor is zero.
"""

# ********RoostGPT********
import pytest
from math import cos, sin, sqrt, tau
from audio_filters.iir_filter import IIRFilter
from audio_filters.butterworth_filter import make_lowpass

class Test_MakeLowpass:

    def test_make_lowpass_with_valid_params(self):
        filter = make_lowpass(1000, 48000)
        assert filter.a_coeffs == [1.0922959556412573, -1.9828897227476208, 0.9077040443587427]
        assert filter.b_coeffs == [0.004277569313094809, 0.008555138626189618, 0.004277569313094809]

    def test_make_lowpass_with_frequency_greater_than_samplerate(self):
        filter = make_lowpass(50000, 48000)
        assert filter.a_coeffs == [1.0138582080144797, -1.9700075539715787, 0.9871417919855203]
        assert filter.b_coeffs == [0.006070900014239607, 0.012141800028479214, 0.006070900014239607]

    def test_make_lowpass_with_zero_frequency(self):
        filter = make_lowpass(0, 48000)
        assert filter.a_coeffs == [1.0, -2.0, 1.0]
        assert filter.b_coeffs == [0.0, 0.0, 0.0]

    def test_make_lowpass_with_negative_q_factor(self):
        filter = make_lowpass(1000, 48000, -1 / sqrt(2))
        assert filter.a_coeffs == [1.0922959556412573, -1.9828897227476208, 0.9077040443587427]
        assert filter.b_coeffs == [0.004277569313094809, 0.008555138626189618, 0.004277569313094809]

    def test_make_lowpass_with_zero_q_factor(self):
        with pytest.raises(ZeroDivisionError):
            make_lowpass(1000, 48000, 0)
