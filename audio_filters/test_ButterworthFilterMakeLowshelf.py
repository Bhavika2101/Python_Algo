# ********RoostGPT********
"""
Test generated by RoostGPT for test python-unit--test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=make_lowshelf_4cf0e3a9b4
ROOST_METHOD_SIG_HASH=make_lowshelf_4cf0e3a9b4

================================VULNERABILITIES================================
Vulnerability: Third-party dependency
Issue: The code relies on the `audio_filters.iir_filter` package, the security of which hasn't been evaluated.
Solution: Review the third-party package for any known vulnerabilities or poor coding practices. Ensure it's being maintained and has a trusted source.

================================================================================
Scenario 1: Testing the low-shelf filter with normal values
Details:
  TestName: test_make_lowshelf_normal_values
  Description: This test is intended to verify that the make_lowshelf function works as expected with normal values. The normal values are chosen such that they are within the valid range and are expected to produce a valid output.
Execution:
  Arrange: Initialize frequency, samplerate, gain_db, and q_factor with normal values.
  Act: Invoke the make_lowshelf function with the initialized values.
  Assert: Check that the function returns an IIRFilter object with correct a_coeffs and b_coeffs.
Validation:
  This test verifies that the make_lowshelf function works correctly with normal values. The function's behavior in this scenario should be consistent with its specifications and business requirements.

Scenario 2: Testing the low-shelf filter with extreme values
Details:
  TestName: test_make_lowshelf_extreme_values
  Description: This test is intended to verify that the make_lowshelf function works as expected with extreme values. The extreme values are chosen such that they are at the limits of the valid range and are expected to produce a valid output.
Execution:
  Arrange: Initialize frequency, samplerate, gain_db, and q_factor with extreme values.
  Act: Invoke the make_lowshelf function with the initialized values.
  Assert: Check that the function returns an IIRFilter object with correct a_coeffs and b_coeffs.
Validation:
  This test verifies that the make_lowshelf function works correctly with extreme values. The function's behavior in this scenario should be consistent with its specifications and business requirements.

Scenario 3: Testing the low-shelf filter with invalid values
Details:
  TestName: test_make_lowshelf_invalid_values
  Description: This test is intended to verify that the make_lowshelf function throws an exception or error when passed invalid values. The invalid values can be negative or zero values for parameters that should be positive, or values that are outside the valid range for the parameters.
Execution:
  Arrange: Initialize frequency, samplerate, gain_db, and q_factor with invalid values.
  Act: Invoke the make_lowshelf function with the initialized values.
  Assert: Check that the function throws an exception or error.
Validation:
  This test verifies that the make_lowshelf function correctly handles invalid input values by throwing an exception or error. This behavior is consistent with the function's specifications and business requirements. 

Scenario 4: Testing the low-shelf filter with edge case values
Details:
  TestName: test_make_lowshelf_edge_values
  Description: This test is intended to verify that the make_lowshelf function works as expected with edge case values. These are values that are just within the valid range and are expected to produce a valid output.
Execution:
  Arrange: Initialize frequency, samplerate, gain_db, and q_factor with edge case values.
  Act: Invoke the make_lowshelf function with the initialized values.
  Assert: Check that the function returns an IIRFilter object with correct a_coeffs and b_coeffs.
Validation:
  This test verifies that the make_lowshelf function works correctly with edge case values. The function's behavior in this scenario should be consistent with its specifications and business requirements.
"""

# ********RoostGPT********
import pytest
from math import sqrt
from butterworth_filter import make_lowshelf
from audio_filters.iir_filter import IIRFilter

class Test_ButterworthFilterMakeLowshelf:

    def test_make_lowshelf_normal_values(self):
        # Arrange
        frequency = 1000
        samplerate = 48000
        gain_db = 6
        q_factor = 1 / sqrt(2)

        # Act
        filter = make_lowshelf(frequency, samplerate, gain_db, q_factor)

        # Assert
        assert isinstance(filter, IIRFilter)
        assert len(filter.a_coeffs) == 3
        assert len(filter.b_coeffs) == 3

    def test_make_lowshelf_extreme_values(self):
        # Arrange
        frequency = 20000
        samplerate = 192000
        gain_db = 20
        q_factor = 0.1

        # Act
        filter = make_lowshelf(frequency, samplerate, gain_db, q_factor)

        # Assert
        assert isinstance(filter, IIRFilter)
        assert len(filter.a_coeffs) == 3
        assert len(filter.b_coeffs) == 3

    def test_make_lowshelf_invalid_values(self):
        # Arrange
        frequency = -1000
        samplerate = 0
        gain_db = -6
        q_factor = -1 / sqrt(2)

        # Act and Assert
        with pytest.raises(ValueError):
            make_lowshelf(frequency, samplerate, gain_db, q_factor)

    def test_make_lowshelf_edge_values(self):
        # Arrange
        frequency = 1
        samplerate = 44100
        gain_db = 0
        q_factor = 1 / sqrt(2)

        # Act
        filter = make_lowshelf(frequency, samplerate, gain_db, q_factor)

        # Assert
        assert isinstance(filter, IIRFilter)
        assert len(filter.a_coeffs) == 3
        assert len(filter.b_coeffs) == 3
