# ********RoostGPT********
"""
Test generated by RoostGPT for test also-ciphers-python-unit using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=atbash_6f54c57419
ROOST_METHOD_SIG_HASH=atbash_f90cffe08e

```
Scenario 1: Test with all uppercase letters
Details:
  TestName: test_atbash_with_all_uppercase_letters
  Description: This test is intended to verify if the function correctly applies the Atbash cipher to a sequence consisting of all uppercase letters.
Execution:
  Arrange: No setup is required for this test.
  Act: Call the atbash function with a sequence of all uppercase letters.
  Assert: Check that the returned string is the expected Atbash ciphered sequence.
Validation:
  This test is important to confirm that the function correctly handles and processes uppercase letters, which is a basic requirement for the Atbash cipher.

Scenario 2: Test with all lowercase letters
Details:
  TestName: test_atbash_with_all_lowercase_letters
  Description: This test is intended to verify if the function correctly applies the Atbash cipher to a sequence consisting of all lowercase letters.
Execution:
  Arrange: No setup is required for this test.
  Act: Call the atbash function with a sequence of all lowercase letters.
  Assert: Check that the returned string is the expected Atbash ciphered sequence.
Validation:
  This test is important to confirm that the function correctly handles and processes lowercase letters, which is a basic requirement for the Atbash cipher.

Scenario 3: Test with a mix of uppercase and lowercase letters
Details:
  TestName: test_atbash_with_mixed_case_letters
  Description: This test is intended to verify if the function correctly applies the Atbash cipher to a sequence consisting of a mix of uppercase and lowercase letters.
Execution:
  Arrange: No setup is required for this test.
  Act: Call the atbash function with a sequence of mixed case letters.
  Assert: Check that the returned string is the expected Atbash ciphered sequence.
Validation:
  This test is important to confirm that the function correctly handles and processes a mix of uppercase and lowercase letters, which is a common use case.

Scenario 4: Test with non-alphabetic characters
Details:
  TestName: test_atbash_with_non_alphabetic_characters
  Description: This test is intended to verify that the function correctly handles non-alphabetic characters.
Execution:
  Arrange: No setup is required for this test.
  Act: Call the atbash function with a sequence containing non-alphabetic characters.
  Assert: Check that the returned string correctly leaves the non-alphabetic characters unchanged.
Validation:
  This test is important to confirm that the function correctly handles non-alphabetic characters, as the Atbash cipher should only be applied to alphabetic characters and leave other characters unchanged.

Scenario 5: Test with an empty string
Details:
  TestName: test_atbash_with_empty_string
  Description: This test is intended to verify that the function correctly handles an empty string.
Execution:
  Arrange: No setup is required for this test.
  Act: Call the atbash function with an empty string.
  Assert: Check that the returned string is also an empty string.
Validation:
  This test is important to confirm that the function correctly handles an empty string, which is a possible edge case.
```
"""

# ********RoostGPT********
import pytest
import string
from ciphers.atbash import atbash

class Test_AtbashAtbash:

    def test_atbash_with_all_uppercase_letters(self):
        assert atbash(string.ascii_uppercase) == string.ascii_uppercase[::-1]

    def test_atbash_with_all_lowercase_letters(self):
        assert atbash(string.ascii_lowercase) == string.ascii_lowercase[::-1]

    def test_atbash_with_mixed_case_letters(self):
        mixed_case_letters = string.ascii_uppercase + string.ascii_lowercase
        expected_result = string.ascii_uppercase[::-1] + string.ascii_lowercase[::-1]
        assert atbash(mixed_case_letters) == expected_result

    def test_atbash_with_non_alphabetic_characters(self):
        non_alphabetic_characters = '1234567890!@#$%^&*()'
        assert atbash(non_alphabetic_characters) == non_alphabetic_characters

    def test_atbash_with_empty_string(self):
        assert atbash('') == ''
