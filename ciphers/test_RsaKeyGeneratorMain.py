# ********RoostGPT********
"""
Test generated by RoostGPT for test also-ciphers-python-unit using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=main_df218cf345
ROOST_METHOD_SIG_HASH=main_61d52e79cd

```
Scenario 1: Validate Successful Key File Generation
Details:
  TestName: test_successful_key_files_generation
  Description: This test verifies that the key files are successfully generated when the function is executed.
Execution:
  Arrange: Mock the 'os.path.exists' to return False. Mock 'make_key_files' to return None.
  Act: Call the 'main' function.
  Assert: Check if 'make_key_files' was called with arguments 'rsa' and 1024.
Validation:
  This test is important to ensure that the function is able to successfully generate the key files when invoked. This is a key requirement of the function's specifications and business logic.

Scenario 2: Validate Early Exit When Key Files Already Exist
Details:
  TestName: test_early_exit_when_key_files_exist
  Description: This test verifies that the function exits early when the key files already exist.
Execution:
  Arrange: Mock the 'os.path.exists' to return True. Mock 'make_key_files' to not be called.
  Act: Call the 'main' function.
  Assert: Check if 'make_key_files' was not called.
Validation:
  This test is crucial to ensure that the function does not overwrite existing key files. This is in line with the function's specifications and business requirements to prevent data loss.

Scenario 3: Validate Correct Messages Are Printed
Details:
  TestName: test_correct_messages_are_printed
  Description: This test verifies that the function prints the correct messages during its execution.
Execution:
  Arrange: Mock the 'print' function. Mock 'make_key_files' to return None.
  Act: Call the 'main' function.
  Assert: Check if 'print' was called with the correct messages.
Validation:
  This test is important to ensure that the function provides the correct feedback to the user during its execution. This is a key requirement of the function's specifications and user interface requirements.
```
"""

# ********RoostGPT********
import os
import sys
import pytest
from unittest.mock import patch, call
from ciphers.rsa_key_generator import main

class Test_RsaKeyGeneratorMain:
    
    @patch('ciphers.rsa_key_generator.make_key_files')
    @patch('os.path.exists')
    def test_successful_key_files_generation(self, mock_exists, mock_make_key_files):
        mock_exists.return_value = False
        main()
        mock_make_key_files.assert_called_once_with('rsa', 1024)

    @patch('ciphers.rsa_key_generator.make_key_files')
    @patch('os.path.exists')
    def test_early_exit_when_key_files_exist(self, mock_exists, mock_make_key_files):
        mock_exists.return_value = True
        main()
        mock_make_key_files.assert_not_called()

    @patch('ciphers.rsa_key_generator.make_key_files')
    @patch('builtins.print')
    def test_correct_messages_are_printed(self, mock_print, mock_make_key_files):
        main()
        calls = [call("Making key files..."), call("Key files generation successful.")]
        mock_print.assert_has_calls(calls)
