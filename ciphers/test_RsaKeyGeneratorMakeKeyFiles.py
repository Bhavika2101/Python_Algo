# ********RoostGPT********
"""
Test generated by RoostGPT for test also-ciphers-python-unit using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=make_key_files_e5616884f9
ROOST_METHOD_SIG_HASH=make_key_files_174057102c

Scenario 1: Test the successful creation of public and private key files
Details:
  TestName: test_successful_key_files_creation
  Description: This test is intended to verify if the public and private key files are successfully created when the function is called with valid parameters.
Execution:
  Arrange: Prepare the test environment by ensuring that no files with the same names exist in the directory. Set a valid name and key size as parameters.
  Act: Call the function make_key_files with the prepared parameters.
  Assert: Check if the files {name}_pubkey.txt and {name}_privkey.txt exist in the directory.
Validation:
  This test verifies that the function behaves as expected when provided with valid parameters. The successful creation of the key files is crucial for the function's specifications and business requirements.

Scenario 2: Test the function behavior when key files already exist
Details:
  TestName: test_key_files_already_exist
  Description: This test is intended to verify the function's behavior when public and private key files with the same name already exist in the directory.
Execution:
  Arrange: Create dummy files {name}_pubkey.txt and {name}_privkey.txt in the directory. Set the same name and a valid key size as parameters.
  Act: Call the function make_key_files with the prepared parameters.
  Assert: Check for the system exit and the correct warning message.
Validation:
  This test ensures that the function correctly handles the scenario of existing key files, preventing accidental overwriting and loss of data.

Scenario 3: Test the successful generation of public and private keys
Details:
  TestName: test_successful_keys_generation
  Description: This test is intended to verify the successful generation of public and private keys in the created files.
Execution:
  Arrange: Prepare the test environment by ensuring that no files with the same names exist in the directory. Set a valid name and key size as parameters.
  Act: Call the function make_key_files with the prepared parameters.
  Assert: Open the created files and check if they contain valid public and private keys respectively.
Validation:
  This test verifies that the function not only creates the key files but also successfully generates and writes the public and private keys into the respective files, meeting the function's specifications and business requirements.

Scenario 4: Test the function behavior with invalid key size
Details:
  TestName: test_invalid_key_size
  Description: This test is intended to verify the function's behavior when an invalid key size is provided.
Execution:
  Arrange: Prepare the test environment by ensuring that no files with the same names exist in the directory. Set a valid name and an invalid key size as parameters.
  Act: Call the function make_key_files with the prepared parameters.
  Assert: Check for any exceptions or error messages indicating an invalid key size.
Validation:
  This test ensures that the function correctly handles invalid key sizes, preventing the generation of invalid keys and maintaining data integrity.
"""

# ********RoostGPT********
import os
import pytest
import random
import sys
from ciphers.rsa_key_generator import make_key_files
from maths.greatest_common_divisor import gcd_by_iterative

class Test_RsaKeyGeneratorMakeKeyFiles:
    @pytest.mark.positive
    def test_successful_key_files_creation(self):
        # Arrange
        name = 'test'
        key_size = 8
        if os.path.exists(f"{name}_pubkey.txt"):
            os.remove(f"{name}_pubkey.txt")
        if os.path.exists(f"{name}_privkey.txt"):
            os.remove(f"{name}_privkey.txt")
        # Act
        make_key_files(name, key_size)
        # Assert
        assert os.path.exists(f"{name}_pubkey.txt")
        assert os.path.exists(f"{name}_privkey.txt")

    @pytest.mark.negative
    def test_key_files_already_exist(self):
        # Arrange
        name = 'test'
        key_size = 8
        with open(f"{name}_pubkey.txt", 'w') as fp:
            pass
        with open(f"{name}_privkey.txt", 'w') as fp:
            pass
        # Act & Assert
        with pytest.raises(SystemExit):
            make_key_files(name, key_size)

    @pytest.mark.positive
    def test_successful_keys_generation(self):
        # Arrange
        name = 'test'
        key_size = 8
        if os.path.exists(f"{name}_pubkey.txt"):
            os.remove(f"{name}_pubkey.txt")
        if os.path.exists(f"{name}_privkey.txt"):
            os.remove(f"{name}_privkey.txt")
        # Act
        make_key_files(name, key_size)
        # Assert
        with open(f"{name}_pubkey.txt", "r") as in_file:
            contents = in_file.read()
            assert len(contents.split(',')) == 3
        with open(f"{name}_privkey.txt", "r") as in_file:
            contents = in_file.read()
            assert len(contents.split(',')) == 3

    @pytest.mark.negative
    def test_invalid_key_size(self):
        # Arrange
        name = 'test'
        key_size = -1
        if os.path.exists(f"{name}_pubkey.txt"):
            os.remove(f"{name}_pubkey.txt")
        if os.path.exists(f"{name}_privkey.txt"):
            os.remove(f"{name}_privkey.txt")
        # Act & Assert
        with pytest.raises(ValueError):
            make_key_files(name, key_size)
